# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    ENV["FASTLANE_DONT_STORE_PASSWORD"] = "1"
    ENV["FASTLANE_PASSWORD"] = "Dangelo11"
    ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"] = "yksi-xzkf-qlwt-cbzb"

    ENV["XCODE_PROJECT"] = "Numero.xcodeproj"
    ENV["IPA_PATH"] = "./fastlane/builds"

    # ALPHA version ENV vars
    ENV["SCHEME_ALPHA"] = "Freemium-Development"
    ENV["APP_NAME_ALPHA"] = "CDTestApp newzik"
    ENV["TAG_PREFIX_ALPHA"] = "build-test-free"

    # BETA version ENV vars
    ENV["SCHEME_BETA"] = "Freemium-Development"
    ENV["APP_NAME_BETA"] = "CDTestApp newzik"
    ENV["TAG_PREFIX_BETA"] = "build-prod-free"

    ENV["PILOT_GROUPS"] = "Betatesteurs"


  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Build and prepare deployment"
  lane :build_before_deploy do
  	# Uncomment cocoapods and carthage for Newzik target
    #cocoapods
    #carthage(cache_builds: true)
    gym(scheme: ENV['SCHEME_ALPHA'], skip_package_ipa: true, skip_archive: true, skip_codesigning: true) # Build your app - more options available
  end

  desc "Deploy a new alpha version (internal) on TestFlight "
  desc "This action does the following:"
  desc ""
  desc "- Ensures a clean git status"
  desc "- Increment the build number"
  desc "- Build and sign the app"
  desc "- Upload the ipa file and an automatic changelog"
  desc "- Commit and push the version bump and build tag"
  lane :deploy_alpha do |options|

  	# Make sure we start off with a clean state (checkout remote)
  	remote_branch = "master"
  	if options[:remote_branch]
    	remote_branch = options[:remote_branch]
  	end
    prepare(remote_branch: remote_branch)

  	# increment, build and generate an ipa file
	new_build_number = increment_and_build(scheme: ENV['SCHEME_ALPHA'])

    # Create changelog, ipa file, and push to TestFlight
    upload_to_appstore(tag_prefix: ENV['TAG_PREFIX_ALPHA'], app_name: ENV['APP_NAME_ALPHA'])

  	# Tag release and push to GitHub
  	add_bump_commit_and_tag(tag_prefix: ENV['TAG_PREFIX_ALPHA'], build_number: new_build_number)
  end

  desc "Deploy a new beta version on TestFlight "
  desc "This action takes changelog = 'Something new happened' as input parameter"
  desc "This action does the following:"
  desc ""
  desc "- Ensures a clean git status"
  desc "- Increment the build number"
  desc "- Build and sign the app"
  desc "- Upload the ipa file and an automatic changelog"
  desc "- Commit and push the version bump and build tag"
  lane :deploy_beta do |options|

  	# Make sure we start off with a clean state (checkout remote)
  	remote_branch = "master"
  	if options[:remote_branch]
    	remote_branch = options[:remote_branch]
  	end
    prepare(remote_branch: options[:remote_branch])

  	# increment, build and generate an ipa file
	new_build_number = increment_and_build(scheme: ENV['SCHEME_BETA'])

    # Create changelog, ipa file, and push to TestFlight
    upload_to_appstore(tag_prefix: ENV['TAG_PREFIX_BETA'], app_name: ENV['APP_NAME_BETA'])
    
  	# Tag release and push to GitHub
  	add_bump_commit_and_tag(tag_prefix: ENV['TAG_PREFIX_BETA'], build_number: new_build_number)
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    cocoapods
    carthage(cache_builds: true)
    # match(type: "appstore")
    # snapshot
    gym(scheme: ENV['SCHEME']) # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # PRIVATE LANES

  # Make sure git is clean and pull/checkout remote branch
  private_lane :prepare do |options|
    ensure_git_status_clean

    current_branch = git_branch

    # # Checkout remote branch if needed
    if !options[:remote_branch].nil? && options[:remote_branch] != current_branch
      branchName = options[:remote_branch]
      puts "Checkout new branch #{branchName}"
      sh("git checkout -b " + branchName)
    else
      sh("git pull origin " + options[:remote_branch]) 
    end

  	# Uncomment cocoapods and carthage for Newzik target
    #cocoapods
    #carthage(cache_builds: true)
  end

  private_lane :increment_and_build do |options|
  	# increment the build number
  	new_build_number = Integer(get_build_number(xcodeproj: ENV['XCODE_PROJECT'])) + 1
  	increment_build_number({
  		build_number: new_build_number
	})

  	# build and generate an ipa file
	gym(scheme: options[:scheme], xcargs: "-allowProvisioningUpdates", output_directory: ENV['IPA_PATH']) # Build your app - more options available
 	new_build_number
  end

  desc "Build changelog since last build tag"
  desc "Only merge commits will be included"
  lane :default_changelog do |options|
  	  tag_prefix = ENV['TAG_PREFIX_ALPHA']
  	  if options[:tag_prefix]
        tag_prefix = options[:tag_prefix]
  	  end
	  changelog = changelog_from_git_commits(
	    #between: [ENV['GIT_PREVIOUS_SUCCESSFUL_COMMIT'] || "HEAD^^^^^", "HEAD"],
	    tag_match_pattern: "#{tag_prefix}*",
	    pretty: "â€¢ %s",
	    merge_commit_filtering: 'only_include_merges'
	    )
	  changelog = changelog.sub(/[\u{1F300}-\u{1F6FF}]/, '')
	  Actions.lane_context[SharedValues::FL_CHANGELOG] = changelog
	  changelog
  end

  desc "Build changelog, ipa file and upload to AppStoreConnect"
  private_lane :upload_to_appstore do |options|
	# Build changelog from PR merge commits since last build tag
	change_log = default_changelog(tag_prefix: options[:tag_prefix])

    # Push to TestFlight
    enable_automatic_code_signing(path: ENV['XCODE_PROJECT'])
    ipa = "#{ENV['IPA_PATH']}/#{options[:app_name]}.ipa"
    pilot(changelog: changelog, skip_submission: true, ipa: ipa) 
  end

  desc "Push a version commit message and a tag"
  private_lane :add_bump_commit_and_tag do |options|
  	# Make sure our directory is clean, except for changes Fastlane has made
  	clean_build_artifacts
  	# Tag release and push to GitHub
  	build_number = get_build_number(xcodeproj: ENV['XCODE_PROJECT'])

	commit_version_bump message: "Bump build to #{options[:build_number]}."
	add_git_tag tag: "#{options[:tag_prefix]}-#{options[:build_number]}"
	push_to_git_remote
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
  	# Discard uncommitted changes if an error occurs during the previous lane 
  	#reset_git_repo
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

