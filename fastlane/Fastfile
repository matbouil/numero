# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    ENV["FASTLANE_DONT_STORE_PASSWORD"] = "1"
    ENV["FASTLANE_PASSWORD"] = "Dangelo11"
    ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"] = "yksi-xzkf-qlwt-cbzb"

    ENV["XCODE_PROJECT"] = "Numero.xcodeproj"

    # ALPHA version ENV vars
    ENV["SCHEME_ALPHA"] = "Freemium-Development"
    ENV["APP_NAME_ALPHA"] = "CDTestApp newzik"

    # BETA version ENV vars
    ENV["SCHEME_BETA"] = "Freemium-Development"
    ENV["APP_NAME_BETA"] = "CDTestApp newzik"

    ENV["PILOT_GROUPS"] = "BIDON"
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Build and prepare deployment"
  lane :build_before_deploy do
  	# Uncomment cocoapods and carthage for Newzik target
    #cocoapods
    #carthage(cache_builds: true)
    gym(scheme: ENV['SCHEME_ALPHA'], skip_package_ipa: true, skip_archive: true, skip_codesigning: true) # Build your app - more options available
  end

  desc "Deploy a new alpha version (internal) on TestFlight "
  desc "This action does the following:"
  desc ""
  desc "- Ensures a clean git status"
  desc "- Increment the build number"
  desc "- Build and sign the app"
  desc "- Upload the ipa file to hockey"
  desc "- Commit and push the version bump and build tag"
  lane :deploy_alpha do 

  	# Make sure we start off with a clean state
  	ensure_git_status_clean

  	# increment the build number from the latest uploaded build
  	new_build_number = Integer(get_build_number(xcodeproj: ENV['XCODE_PROJECT'])) + 1

  	increment_build_number({
  		build_number: new_build_number
	})

  	# build and generate an ipa file
	gym(scheme: ENV['SCHEME_ALPHA'], xcargs: "-allowProvisioningUpdates", output_directory: "./fastlane/builds") # Build your app - more options available

    # Push to TestFlight
    enable_automatic_code_signing(path: ENV['XCODE_PROJECT'])
    ipa = "./fastlane/builds/#{ENV['APP_NAME_ALPHA']}.ipa"
    pilot(skip_submission: true, ipa: ipa) 

  	# Make sure our directory is clean, except for changes Fastlane has made
  	clean_build_artifacts

  	# Tag release and push to GitHub
	commit_version_bump message: "Bump build to #{new_build_number}."
	add_git_tag tag: "build-test-free-#{new_build_number}"
	push_to_git_remote
  end

  desc "Deploy a new beta version on TestFlight "
  desc "This action takes changelog = 'Something new happened' as input parameter"
  desc "This action does the following:"
  desc ""
  desc "- Ensures a clean git status"
  desc "- Increment the build number"
  desc "- Build and sign the app"
  desc "- Upload the ipa file to hockey"
  desc "- Commit and push the version bump and build tag"
  lane :deploy_beta do |options|

  	beta_changelog = "Default changelog"
 	if options[:changelog]
    	beta_changelog = options[:changelog] # the :changelog is passed as input param of the deploy_beta lane
  	end

  	# Make sure we start off with a clean state
  	ensure_git_status_clean

  	# increment the build number from the latest uploaded build
  	new_build_number = Integer(get_build_number(xcodeproj: ENV['XCODE_PROJECT'])) + 1

  	increment_build_number({
  		build_number: new_build_number
	})

  	# build and generate an ipa file
	gym(scheme: ENV['SCHEME_BETA'], xcargs: "-allowProvisioningUpdates", output_directory: "./fastlane/builds") # Build your app - more options available

    # Push to TestFlight
    enable_automatic_code_signing(path: ENV['XCODE_PROJECT'])

    groups = ENV["PILOT_GROUPS"].split(",")
    ipa = "./fastlane/builds/#{ENV['APP_NAME_BETA']}.ipa"
    pilot(changelog: beta_changelog,
    	distribute_external: true,
    	ipa: ipa,
    	groups: ['BIDON']) # groups)

  	# Make sure our directory is clean, except for changes Fastlane has made
  	clean_build_artifacts

  	# Tag release and push to GitHub
	commit_version_bump message: "Bump build to #{new_build_number}."
	add_git_tag tag: "build-prod-free-#{new_build_number}"
	push_to_git_remote
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    cocoapods
    carthage(cache_builds: true)
    # match(type: "appstore")
    # snapshot
    gym(scheme: ENV['SCHEME']) # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

